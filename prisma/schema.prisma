generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                     String    @id @default(uuid()) @db.Uuid
  email                  String    @unique @db.VarChar(100)
  username               String    @db.VarChar(50)
  password               String    @db.VarChar(100)
  profile_image          String?   @db.VarChar(255)
  is_premium             Boolean   @default(false)
  current_level          Int       @default(1)
  xp                     Int       @default(0)
  coins                  Int       @default(0)
  streak                 Int       @default(0)
  isActive               Boolean   @default(true)
  role                   String    @default("user")
  last_login             DateTime? @db.Timestamp(6)
  reset_token            String?   @db.VarChar(100)
  reset_token_expiration DateTime? @db.Timestamp(6)
  created_at             DateTime  @default(now()) @db.Timestamp(6)
  updated_at             DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  userLanguages      user_languages[]
  userWords          user_words[]
  placementTests     placement_tests[]
  trainingPlans      training_plans[]
  trainingSessions   training_sessions[]
  userAchievements   user_achievements[]
  userMissions       user_missions[]
  userStoreItems     user_store_items[]
  leagueEntries      league_entries[]
  followsAsFollower  follows[]           @relation("Follower")
  followsAsFollowing follows[]           @relation("Following")
  gameRooms          game_rooms[]
  gameRoomUsers      game_room_users[]
}

model languages {
  id   String @id @default(uuid()) @db.Uuid
  code String @unique @db.VarChar(10) // en, de, fr
  name String @db.VarChar(50) // English, German

  // Relations
  userLanguages user_languages[]
  words         words[]
  gameRooms     game_rooms[]
  user_words    user_words[]
}

model user_languages {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  language_id   String   @db.Uuid
  current_level Int      @default(1)
  xp            Int      @default(0)
  streak        Int      @default(0)
  created_at    DateTime @default(now()) @db.Timestamp(6)

  // Relations
  user     users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  language languages @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@unique([user_id, language_id])
}

model words {
  id             String @id @default(uuid()) @db.Uuid
  word           String @db.VarChar(100)
  meaning        String @db.Text
  level          Int // CEFR (A1 - C2)
  language_id    String @db.Uuid
  part_of_speech String @db.VarChar(50)

  // Relations
  language         languages           @relation(fields: [language_id], references: [id], onDelete: Cascade)
  exampleSentences example_sentences[]
  aiQuestions      ai_questions[]
}

model example_sentences {
  id          String @id @default(uuid()) @db.Uuid
  word_id     String @db.Uuid
  sentence    String @db.Text
  translation String @db.Text

  // Relations
  word words @relation(fields: [word_id], references: [id], onDelete: Cascade)
}

model user_words {
  id          String   @id @default(uuid()) @db.Uuid
  user_id     String   @db.Uuid
  word        String   @db.VarChar(100)
  meaning     String   @db.Text
  level       Int
  language_id String   @db.Uuid
  source      String   @db.VarChar(50) // csv, json, manual
  created_at  DateTime @default(now()) @db.Timestamp(6)

  // Relations
  user     users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  language languages @relation(fields: [language_id], references: [id], onDelete: Cascade)
}

model placement_tests {
  id              String   @id @default(uuid()) @db.Uuid
  user_id         String   @db.Uuid
  result_level    Int
  total_correct   Int
  total_questions Int
  created_at      DateTime @default(now()) @db.Timestamp(6)

  // Relations
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model training_plans {
  id             String   @id @default(uuid()) @db.Uuid
  user_id        String   @db.Uuid
  name           String   @db.VarChar(100)
  type           String   @db.VarChar(20) // daily, weekly, monthly
  total_words    Int
  target_minutes Int
  created_at     DateTime @default(now()) @db.Timestamp(6)

  // Relations
  user             users               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  trainingSessions training_sessions[]
}

model training_sessions {
  id               String   @id @default(uuid()) @db.Uuid
  user_id          String   @db.Uuid
  plan_id          String   @db.Uuid
  completed_words  Int
  duration_minutes Int
  xp_earned        Int
  coins_earned     Int
  date             DateTime @db.Date

  // Relations
  user users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan training_plans @relation(fields: [plan_id], references: [id], onDelete: Cascade)
}

model achievements {
  id          String @id @default(uuid()) @db.Uuid
  name        String @db.VarChar(100)
  description String @db.Text
  level       Int
  icon        String @db.VarChar(255)

  // Relations
  userAchievements user_achievements[]
}

model user_achievements {
  id             String   @id @default(uuid()) @db.Uuid
  user_id        String   @db.Uuid
  achievement_id String   @db.Uuid
  earned_at      DateTime @default(now()) @db.Timestamp(6)

  // Relations
  user        users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  achievement achievements @relation(fields: [achievement_id], references: [id], onDelete: Cascade)

  @@unique([user_id, achievement_id])
}

model missions {
  id          String @id @default(uuid()) @db.Uuid
  title       String @db.VarChar(100)
  description String @db.Text
  type        String @db.VarChar(20) // daily, weekly, ai
  xp_reward   Int
  coin_reward Int

  // Relations
  userMissions user_missions[]
}

model user_missions {
  id           String    @id @default(uuid()) @db.Uuid
  user_id      String    @db.Uuid
  mission_id   String    @db.Uuid
  is_completed Boolean   @default(false)
  completed_at DateTime? @db.Timestamp(6)

  // Relations
  user    users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  mission missions @relation(fields: [mission_id], references: [id], onDelete: Cascade)

  @@unique([user_id, mission_id])
}

model store_items {
  id          String @id @default(uuid()) @db.Uuid
  name        String @db.VarChar(100)
  description String @db.Text
  type        String @db.VarChar(50) // booster, cosmetic, streak_freeze
  coin_cost   Int

  // Relations
  userStoreItems user_store_items[]
}

model user_store_items {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  store_item_id String   @db.Uuid
  acquired_at   DateTime @default(now()) @db.Timestamp(6)
  is_active     Boolean  @default(true)

  // Relations
  user      users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  storeItem store_items @relation(fields: [store_item_id], references: [id], onDelete: Cascade)
}

model leagues {
  id        String @id @default(uuid()) @db.Uuid
  name      String @db.VarChar(50) // Bronze, Silver, Gold, etc.
  min_level Int
  max_level Int

  // Relations
  leagueEntries league_entries[]
}

model league_entries {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  league_id  String   @db.Uuid
  week_start DateTime @db.Date
  total_xp   Int      @default(0)
  rank       Int

  // Relations
  user   users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  league leagues @relation(fields: [league_id], references: [id], onDelete: Cascade)

  @@unique([user_id, week_start])
}

model follows {
  id           String   @id @default(uuid()) @db.Uuid
  follower_id  String   @db.Uuid
  following_id String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)

  // Relations
  follower  users @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  following users @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
}

model game_rooms {
  id           String   @id @default(uuid()) @db.Uuid
  host_user_id String   @db.Uuid
  language_id  String   @db.Uuid
  level        Int
  status       String   @db.VarChar(20) // waiting, active, finished
  created_at   DateTime @default(now()) @db.Timestamp(6)

  // Relations
  hostUser      users             @relation(fields: [host_user_id], references: [id], onDelete: Cascade)
  language      languages         @relation(fields: [language_id], references: [id], onDelete: Cascade)
  gameRoomUsers game_room_users[]
}

model game_room_users {
  id        String   @id @default(uuid()) @db.Uuid
  room_id   String   @db.Uuid
  user_id   String   @db.Uuid
  score     Int      @default(0)
  joined_at DateTime @default(now()) @db.Timestamp(6)

  // Relations
  room game_rooms @relation(fields: [room_id], references: [id], onDelete: Cascade)
  user users      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([room_id, user_id])
}

model ai_questions {
  id             String @id @default(uuid()) @db.Uuid
  word_id        String @db.Uuid
  sentence       String @db.Text
  correct_answer String @db.VarChar(100)
  wrong_options  String @db.Text
  difficulty     Int

  // Relations
  word words @relation(fields: [word_id], references: [id], onDelete: Cascade)
}
